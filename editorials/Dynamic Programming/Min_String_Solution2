//For the DP solution, you can refer to editorial.
//This solution uses the fact that the order of alphabets does not matter. You can only end up in this solution if you have tried 
//enough examples...
//Now lets take a look at some examples...
//1. f(abc) = 2
//2. f(aabc) = 1
//3. f(aaa) = 3
//4. f(aaaabbbbbbbbcccc) = 2
//5. f(aaaaabbbbbbbccc) = 2
//5. f(aaaabbbbbcccc) = 1
//try some more examples this way...note that order of alphabets does not matter.

//We notice that if count of all a,b and c is even/odd -- minimum length is 2
//If all the alphabets are same -- minimum length is length of string.
// minimum length is one in all other cases.

//So to solve this question..just count the number of occurences of each alphabet and then use above facts for answer.

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
int main()
{
    ll t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        vector<ll> v(3,0);
        for(ll i=0;i<s.size();i++)
        {
            v[s[i]-97]++;
        }
        bool ae=v[0]%2;  //condition for even or odd.
        bool be=v[1]%2;
        bool ce=v[2]%2;
        if((v[0]==0&&v[1]==0) || (v[1]==0&&v[2]==0) || (v[0]==0&&v[2]==0))   ///If string is composed of single digit.
        {
            cout<<max(v[0],max(v[1],v[2]))<<endl;
        }
        else if((ae&&be&&ce)||((!ae)&&(!be)&&(!ce))) ///Checking if count of all letters is even / odd
        {
            cout<<2<<endl;
        }
        else //all other cases
        {
            cout<<1<<endl;
        }
    }
    //Time complexity of above algorithm is O(n) where n is size of string..This is better than DP solution which has O(n^3).
    // Certainly this problem follows a pattern, but do look at DP solution for understanding the concept..not every problem is like this.
	return 0;
}
